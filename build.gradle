plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'groovy'
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Ladysnake Libs"
		url = "https://ladysnake.jfrog.io/artifactory/mods"
	}
	maven {
		url = "https://maven.shedaniel.me/"
	}
	maven{
		url = "https://maven.terraformersmc.com/releases/"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation "dev.emi:trinkets:${project.trinkets_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

//Simple Publish
import com.modrinth.minotaur.TaskModrinthUpload
import groovy.json.JsonSlurper

String publishVersionNumber;
String publishVersionName;
String publishChangelog;

File changelogFile = file('CHANGELOG.md')
File jsonFile = file('src/main/resources/fabric.mod.json')

def parsedJson = new JsonSlurper().parseText(jsonFile.text)

String minecraft_version = parsedJson.depends.minecraft
String mod_name = parsedJson.name

publishVersionNumber = project.mod_version+"-"+minecraft_version;
publishVersionName =  mod_name + " " + publishVersionNumber

if(changelogFile.text.contains("## "+project.mod_version)){
	publishChangelog = changelogFile.text.split("## "+project.mod_version)[1].split("\n\n")[0]
}else{
	println "Can't find changelog for this version"
}

curseforge {
	apiKey = System.getenv("CURSEFORGE_TOKEN") ? System.getenv("CURSEFORGE_TOKEN") : ""
	project {
		id = project.curseforge_projectId
		releaseType = "release"

		project.modrinth_versions.split(',').each(version -> { addGameVersion(version) })

		changelogType = 'markdown'
		changelog = publishChangelog

		relations{
			requiredDependency 'fabric-api'
			optionalDependency 'cloth-config'
			optionalDependency 'modmenu'
			optionalDependency 'trinkets-fabric'
		}

		afterEvaluate{
			mainArtifact(jar){
				displayName = publishVersionName
			}
			uploadTask.dependsOn(jar)
		}
	}
	options{
		forgeGradleIntegration = false
	}
}

tasks.register('publishModrinth', TaskModrinthUpload) {
//	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//
//	println "Enter a Github Access Token: "
//
//	token = br.readLine();
	if(!System.getenv("GITHUB_TOKEN")){
		println "Can't find `GITHUB_TOKEN`"
	}

	onlyIf {
		System.getenv("GITHUB_TOKEN") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
	}



	token = System.getenv("GITHUB_TOKEN")
	projectId = project.modrinth_projectId
	versionNumber = publishVersionNumber
	versionName = publishVersionName
	uploadFile = remapJar
	project.modrinth_versions.split(',').each(version -> { addGameVersion(version) })
	addLoader('fabric')

	changelog = publishChangelog
}

tasks.register('publishMod') {
	publishModrinth()
	curseforge(project.curseforge_projectId)
}
